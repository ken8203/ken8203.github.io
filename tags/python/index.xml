<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>python on Hi im jaychung</title><link>https://blog.jaychung.tw/tags/python/</link><description>Recent content in python on Hi im jaychung</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 05 Aug 2018 23:30:25 +0800</lastBuildDate><atom:link href="https://blog.jaychung.tw/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Load Complex Json Schema With Python</title><link>https://blog.jaychung.tw/posts/load-complex-json-schema-with-python/</link><pubDate>Sun, 05 Aug 2018 23:30:25 +0800</pubDate><guid>https://blog.jaychung.tw/posts/load-complex-json-schema-with-python/</guid><description>最近拿 JSON schema 來驗證自己的 API 回傳內容有沒有錯誤，在過程中遇到一點小障礙─無法讀取複雜的 JSON schema。
假設有支 API /v1/products/{product_id}，它的 schema 如下：
{ &amp;#34;$schema&amp;#34;: &amp;#34;http://json-schema.org/draft-04/schema#&amp;#34;, &amp;#34;title&amp;#34;: &amp;#34;Product resource&amp;#34;, &amp;#34;description&amp;#34;: &amp;#34;A product resource&amp;#34;, &amp;#34;type&amp;#34;: &amp;#34;object&amp;#34;, &amp;#34;additionalProperties&amp;#34;: false, &amp;#34;properties&amp;#34;: { &amp;#34;data&amp;#34;: { &amp;#34;type&amp;#34;: &amp;#34;object&amp;#34;, &amp;#34;additionalProperties&amp;#34;: false, &amp;#34;properties&amp;#34;: { &amp;#34;product&amp;#34;: { &amp;#34;type&amp;#34;: &amp;#34;object&amp;#34;, &amp;#34;additionalProperties&amp;#34;: false, &amp;#34;properties&amp;#34;: { &amp;#34;id&amp;#34;: { &amp;#34;type&amp;#34;: &amp;#34;integer&amp;#34; }, &amp;#34;name&amp;#34;: { &amp;#34;type&amp;#34;: &amp;#34;string&amp;#34; }, &amp;#34;price&amp;#34;: { &amp;#34;type&amp;#34;: &amp;#34;integer&amp;#34; }, &amp;#34;created_at&amp;#34;: { &amp;#34;type&amp;#34;: &amp;#34;integer&amp;#34; }, &amp;#34;updated_at&amp;#34;: { &amp;#34;type&amp;#34;: &amp;#34;integer&amp;#34; } }, &amp;#34;required&amp;#34;: [ &amp;#34;id&amp;#34;, &amp;#34;name&amp;#34;, &amp;#34;price&amp;#34;, &amp;#34;created_at&amp;#34;, &amp;#34;updated_at&amp;#34; ] } } } }, &amp;#34;required&amp;#34;: [ &amp;#34;data&amp;#34; ] } 這種簡單的 schema，直接用 json 讀取是沒問題的</description></item><item><title>這陣子</title><link>https://blog.jaychung.tw/posts/after-working/</link><pubDate>Sat, 09 Dec 2017 11:43:59 +0800</pubDate><guid>https://blog.jaychung.tw/posts/after-working/</guid><description>這陣子做了幾件事：
成功嶺秋令營 開始工作 從 Pelican 搬到 Ghost 開始工作後沒多久，就想著應該要繼續寫 Blog ，最主要是能紀錄工作上碰到的問題，其次寫點東西也好。從成功嶺下來只有兩個多禮拜，卻覺得過了好久，跟以前很不一樣了呢。最顯著的差別是宵夜，上班後就幾乎沒在吃宵夜了，總想著要快點睡，不像以前十二點一到就餓慘。
至於為什麼要從 Pelican 搬到 Ghost ？倒也不是 Pelican 不好用，只是覺著要有個編輯器，打起來比較舒服。除了這點，其他的大概沒什麼變，一樣是 host 在 github page 上。
在搬家的過程遇到一點障礙，可能是 Pelican 的用戶太少了，所以沒有現成的 pelican -&amp;gt; ghost migrator，雖然舊的文章也沒幾篇，但我畢竟是個念舊的人，少歸少總得接過來，於是 Pghost 就誕生了！
接下來，希望每個禮拜都能寫一篇文章，應該還行
吧</description></item><item><title>Procmail Pipe to Python Script</title><link>https://blog.jaychung.tw/posts/procmail-pipe-to-python-script/</link><pubDate>Tue, 29 Mar 2016 23:19:00 +0800</pubDate><guid>https://blog.jaychung.tw/posts/procmail-pipe-to-python-script/</guid><description>我們每天都在收信，那有沒有某些信件是你想挑出來，特別處理的？有的話可以使用 procmail 這個程式來幫你。
首先你家目錄下的 .forward 檔案內容必須是
&amp;#34;|/usr/local/bin/procmail&amp;#34; 確定信件會被 pipe 給 procmail 處理。
那現在重點會擺在 .procmailrc 這個檔案，這裡只會粗淺的講一下實現「用 procmail 將信件傳遞給 script 執行」。
假設我想要將從 ken8203@love.com 寄來的信傳至 mail_processing.py 做處理
:0Wc: * ^From.*ken8203@love.com | /usr/local/bin/python $HOME/mail_processing.py 如此一來就可以正確的執行了，更細節的 filter 寫法可以到網路上查查，挺多的！
OK，那 mail_processing.py 的改怎麼寫，才可以接住 pipe 過來的內容
# -*- coding: utf-8 -*- import sys import email full_msg = sys.stdin.readlines() msg = email.message_from_string(&amp;#39;&amp;#39;.join(full_msg)) with open(&amp;#39;mail.txt&amp;#39;, &amp;#39;w&amp;#39;) as fout: fout.write(msg[&amp;#39;to&amp;#39;] + &amp;#39;\n&amp;#39;) fout.write(msg[&amp;#39;from&amp;#39;] + &amp;#39;\n&amp;#39;) fout.write(&amp;#39;&amp;#39;.join(full_msg)) 就是這麼簡單！
Note 如果你的 mail.txt 遲遲不出來（有時候會 delay 一下，讓子彈飛一會兒），你可以考慮寫進 log 看看問題在哪，修改一下 .</description></item><item><title>Scikit Learn Combining Classifiers</title><link>https://blog.jaychung.tw/posts/scikit-learn-combining-classifiers/</link><pubDate>Sun, 15 Nov 2015 23:13:44 +0800</pubDate><guid>https://blog.jaychung.tw/posts/scikit-learn-combining-classifiers/</guid><description>跑 Classification 的傳統方式是決定一個 Classifier 後，透過 feature 的新增或是參數的調整，來提高準確率；而另外一個方法就是集百家之優來改善預測的結果－Essemble。
今天要介紹的是用 Voting 的方式來決定預測的結果，當然這只是 Essemble 中的其中一種，還有很多其他的方法。
Scikit-learn 的 Voting 分為 hard 與 soft。
Hard 簡單來講就是多數決，例如：
這樣預測結果就會是 class 1。
Soft 這會依照預測出來每個 class 的機率乘上你給的權重（weight）來做定奪，例如：（w1=w2=w3=1）
# of classifier class 1 class 2 class 3 class 4 1 w1 × 0.2 w1 × 0.4 w1 × 0.3 w1 × 0.1 2 w2 × 0.5 w2 × 0.2 w2 × 0.</description></item><item><title>How to use DictVectorizer (Scikit Learn)</title><link>https://blog.jaychung.tw/posts/scikit-learn-dictvectorizer/</link><pubDate>Sun, 02 Aug 2015 23:12:24 +0800</pubDate><guid>https://blog.jaychung.tw/posts/scikit-learn-dictvectorizer/</guid><description>以往使用的機器學習（Machine Learning）工具都是 LIBSVM，而這次因緣際會用了 Python 的 scikit-learn，卻不知道如何使用自己的 Feature，剛好來記錄一下。
scikit-learn 很強大的內建了幾種 Feature generator，像是 CountVectorizer、TfidfVectorizer&amp;hellip;等等。而 DictVectorizer 則可以搭配自己的 Feature ，用法如下：
from sklearn.feature_extraction import DictVectorizer vectorizer = DictVectorizer(sparse=False) features = [ {&amp;#39;feature_name_1&amp;#39;: 1, &amp;#39;feature_name_2&amp;#39;: 2}, {&amp;#39;feature_name_1&amp;#39;: 3, &amp;#39;feature_name_3&amp;#39;: 1} ] X = vectorizer.fit_transform(features) model = SomeKindofModel() clf = model.fit(X, label)</description></item><item><title>Python Chinese Processing</title><link>https://blog.jaychung.tw/posts/python-chinese-processing/</link><pubDate>Sat, 25 Jul 2015 23:10:17 +0800</pubDate><guid>https://blog.jaychung.tw/posts/python-chinese-processing/</guid><description>最近在處理大量的中文 json 檔案，一直遇到編碼上的問題，相信大家也都有遇過，
UnicodeEncodeError: 'ascii' codec can't encode characters in position 2-10: ordinal not in range(128) 也就是 ascii 無法順利編碼，最後得到了一個解決方法：調整 ensure_ascii 參數以及使用codecs。
我們用example.json當做範例：
[ { &amp;#34;category&amp;#34;: &amp;#34;數位生活&amp;#34;, &amp;#34;content&amp;#34;: &amp;#34;&amp;lt;p&amp;gt;&amp;lt;span style=\&amp;#34;font-size: 12pt;\&amp;#34;&amp;gt;&amp;lt;a href=\&amp;#34;http://mulicia.pixnet.net/album/photo/290322265\&amp;#34;&amp;gt;&amp;lt;img src=\&amp;#34;//pic.pimg.tw/mulicia/1430390908-1434509582.jpg?v=1430390937\&amp;#34; alt=\&amp;#34;\&amp;#34; /&amp;gt;&amp;lt;/a&amp;gt;&amp;amp;nbsp;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;\r\n&amp;lt;p&amp;gt;&amp;lt;span style=\&amp;#34;font-size: 12pt;\&amp;#34;&amp;gt;之前也有跟各位推薦過可以將照片上傳的空間&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;\r\n&amp;lt;p&amp;gt;&amp;lt;span style=\&amp;#34;font-size: 12pt;\&amp;#34;&amp;gt;&amp;lt;!-- more --&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;\r\n&amp;lt;p&amp;gt;&amp;lt;span style=\&amp;#34;background-color: #ffff99; font-size: 12pt;\&amp;#34;&amp;gt;&amp;lt;a style=\&amp;#34;color: #000000; text-decoration: none;\&amp;#34; href=\&amp;#34;http://mulicia.pixnet.net/blog/post/30366011\&amp;#34;&amp;gt;&amp;lt;span style=\&amp;#34;background-color: #ffff99;\&amp;#34;&amp;gt;保存相片的優質網路硬碟 Onedrive&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;\r\n&amp;lt;p&amp;gt;&amp;lt;span style=\&amp;#34;font-size: 12pt;\&amp;#34;&amp;gt;但是Onedrive改版之後竟然出現略過上傳非照片的項目，所以今天我們來使用另一款容量更大，而且不挑照片的雲端空間&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;\r\n&amp;lt;p&amp;gt;&amp;lt;span style=\&amp;#34;font-size: 12pt;\&amp;#34;&amp;gt;首先，你要先註冊mega&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;\r\n&amp;lt;p&amp;gt;&amp;lt;span style=\&amp;#34;font-size: 12pt;\&amp;#34;&amp;gt;這邊可以下載：&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;\r\n&amp;lt;p&amp;gt;&amp;lt;span style=\&amp;#34;font-size: 12pt; background-color: #ffff99;\&amp;#34;&amp;gt;&amp;lt;a href=\&amp;#34;https://itunes.apple.com/tw/app/mega/id706857885?l=zh&amp;amp;amp;mt=8\&amp;#34;&amp;gt;&amp;lt;span style=\&amp;#34;background-color: #ffff99;\&amp;#34;&amp;gt;點我&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;\r\n&amp;lt;p&amp;gt;&amp;lt;span style=\&amp;#34;font-size: 12pt; background-color: #ffff99;\&amp;#34;&amp;gt;&amp;lt;a href=\&amp;#34;https://itunes.apple.com/tw/app/mega/id706857885?l=zh&amp;amp;amp;mt=8\&amp;#34;&amp;gt;&amp;lt;span style=\&amp;#34;background-color: #ffff99;\&amp;#34;&amp;gt;https://itunes.</description></item><item><title>How to Use Flask Login</title><link>https://blog.jaychung.tw/posts/how-to-use-flask-login/</link><pubDate>Mon, 23 Feb 2015 23:07:15 +0800</pubDate><guid>https://blog.jaychung.tw/posts/how-to-use-flask-login/</guid><description>&lt;h2 id="flask-login-可以做什麼">Flask-Login 可以做什麼？&lt;/h2>
&lt;blockquote>
&lt;p>Flask-Login provides user session management for Flask. It handles the common tasks of logging in, logging out, and remembering your users’ sessions over extended periods of time.&lt;/p>
&lt;/blockquote>
&lt;p>簡而言之就是替網站管理 session，這裡只說明最一般的用法，其功能當然不僅於此，如有需要可以參考 &lt;a href="https://flask-login.readthedocs.org/en/latest/">官方的說明文件&lt;/a>。&lt;/p></description></item></channel></rss>